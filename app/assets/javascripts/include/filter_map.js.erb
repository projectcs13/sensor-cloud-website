    function map_init() {

    	function displayInfo(widget) {
		  var longitude = document.getElementById('long');
		  var latitude = document.getElementById('lati');
		  var radkm = document.getElementById('radkm');
		  longitude.value = widget.get('position').lng();
		  latitude.value = widget.get('position').lat();
		  radkm.value = widget.get('distance');
		}

    	function RadiusWidget() {
    		var circle = new google.maps.Circle({
    			strokeWeight: 2
    		});
    		// Set the distance property value, default to 50km.
    		this.set('distance', 5);
    		this.bindTo('bounds', circle);
    		circle.bindTo('center',this);
    		circle.bindTo('map', this);
    		circle.bindTo('radius',this);
    		this.addSizer_();
    	}
    	RadiusWidget.prototype = new google.maps.MVCObject();

    	RadiusWidget.prototype.distance_changed = function() {
    		this.set('radius', this.get('distance')*1000);
    	};

    	RadiusWidget.prototype.addSizer_ = function() {
		  var sizer = new google.maps.Marker({
		    draggable: true,
		    title: 'Drag me!',
		    icon: "<%= asset_path 'arrows.png' %>",
		    size: new google.maps.Size(10,10)
		  });
		  console.log(sizer);
		  sizer.bindTo('map', this);
		  sizer.bindTo('position', this, 'sizer_position');

		  var me = this;
		  google.maps.event.addListener(sizer, 'drag', function() {
		  // Set the circle distance (radius)
		  me.setDistance();
		  me.center_changed();
		  });
		};

		RadiusWidget.prototype.center_changed = function() {
		  var bounds = this.get('bounds');

		  // Bounds might not always be set so check that it exists first.
		  if (bounds) {
		    var lng = bounds.getNorthEast().lng();

		    // Put the sizer at center, right on the circle.
		    var position = new google.maps.LatLng(this.get('center').lat(), lng);
		    this.set('sizer_position', position);
		  }
		};

		RadiusWidget.prototype.distanceBetweenPoints_ = function(p1, p2) {
		  if (!p1 || !p2) {
		    return 0;
		  }

		  var R = 6371; // Radius of the Earth in km
		  var dLat = (p2.lat() - p1.lat()) * Math.PI / 180;
		  var dLon = (p2.lng() - p1.lng()) * Math.PI / 180;
		  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
		    Math.cos(p1.lat() * Math.PI / 180) * Math.cos(p2.lat() * Math.PI / 180) *
		    Math.sin(dLon / 2) * Math.sin(dLon / 2);
		  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
		  var d = R * c;
		  return d;
		};

		RadiusWidget.prototype.setDistance = function() {
		  // As the sizer is being dragged, its position changes.  Because the
		  // RadiusWidget's sizer_position is bound to the sizer's position, it will
		  // change as well.
		  var pos = this.get('sizer_position');
		  var center = this.get('center');
		  var distance = this.distanceBetweenPoints_(center, pos);

		  // Set the distance property for any objects that are bound to it
		  this.set('distance', distance);
		};

		function DistanceWidget(map) {
		  this.set('map', map);
		  this.set('position', map.getCenter());

		  var marker = new google.maps.Marker({
		    draggable: true,
		    title: 'Move me!'
		  });

		  // Bind the marker map property to the DistanceWidget map property
		  marker.bindTo('map', this);

		  // Bind the marker position property to the DistanceWidget position
		  // property
		  marker.bindTo('position', this);

					  // Create a new radius widget
		  var radiusWidget = new RadiusWidget();

			// Bind the radiusWidget map to the DistanceWidget map
		  radiusWidget.bindTo('map', this);

			// Bind the radiusWidget center to the DistanceWidget position
		  radiusWidget.bindTo('center', this, 'position');

		  // Bind to the radiusWidgets' distance property
			this.bindTo('distance', radiusWidget);

			// Bind to the radiusWidgets' bounds property
			this.bindTo('bounds', radiusWidget);
		}
		DistanceWidget.prototype = new google.maps.MVCObject();

        var mapDiv = document.getElementById('map-canvas');
        var map = new google.maps.Map(mapDiv, {
          center: new google.maps.LatLng(59.8581, 17.6447),
          zoom: 8,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        });
      	var distanceWidget = new DistanceWidget(map);

      	google.maps.event.addListener(distanceWidget, 'distance_changed', function() {
		  displayInfo(distanceWidget);
		});

		google.maps.event.addListener(distanceWidget, 'position_changed', function() {
		  displayInfo(distanceWidget);
		});

      }

      //google.maps.event.addDomListener(window, 'load', init);
